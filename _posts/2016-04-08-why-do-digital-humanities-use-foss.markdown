---
layout: post
title: "Why do Digital Humanities Projects often use Open Source Software Tools?"
description: In     The Magic Cauldron, Raymond uses rational choice theory to demonstrate why a business might find greater value in preferring open – rather than closed – source software implementations. These arguments for free open source software (FOSS) are built from Raymond's previous discussion in The Cathedral and the Bazaar regarding how FOSS ideologies create an effective environment for software development. Many of the points raised by Raymond directly relate to why a researcher might prefer FOSS to solve domain problems in digital humanities projects.
tags: digitalhumanities dh writing raymond esr
author: Cooper Beilby
image: http://i.imgur.com/zUzImht.jpg
imagesrc: Niels Heidenreich
---

In *The Magic Cauldron*, Raymond uses rational choice theory to demonstrate why a business might find greater value in preferring open – rather than closed – source software implementations. These arguments for free open source software (FOSS) are built from Raymond's previous discussion in *The Cathedral and the Bazaar* regarding how FOSS ideologies create an effective environment for software development. Many of the points raised by Raymond directly relate to why a researcher might prefer FOSS to solve domain problems in digital humanities projects. 

A key point Raymond raises regards constructive laziness: considering that results trump effort, beginning from a partial solution is nearly always preferable to starting from scratch. As FOSS projects are free (as in speech, *libre*), they are readily available to be adapted and modified to any specific needs. Raymond observes that it is only through praxis that problems are truly understood: hence, it is likely that initial solutions will be inadequate and require modification or even complete rethinking. With proprietary software this means either being locked into a poor solution (because the code cannot be modified) or expending financial resources on new solutions.  Free (as in beer, *gratis*) FOSS tools allow for rapid prototyping, thus rapid failures, and therefore rapidly better solutions without snowballing financial costs. 

FOSS can also be used as a 'strategic weapon' (Raymond 2000). Free (libre) code means that similar projects are not forced to implement individual solutions in parallel, but instead can improve, modify and adapt existing project code, thus contributing back to the project. A development base built across a wide community allows for cost sharing. This also provides risk spreading by ensuring that even if the original developers leave, other developers can fill the gaps, thus preventing users from being left with projects reliant on orphaned software. This contrasts sharply with proprietary software where users are reliant on the company considering the software valuable enough to continue development and support. Furthermore, the free (gratis) nature of FOSS allows it to act as a market loss leader, preventing corporate price fixing and monopolistic control over how solutions should be implemented.

For Raymond, FOSS is particularly valuable when projects require independent peer review for verifying correctness of design and implementation (something all academic research requires). Free (libre) code translates to transparent code.  The collaborative community aspects of FOSS combine with this transparency to increase accountability and replicability. Moreover, best practices arise more rapidly as other users see different approaches to problems, provide small suggestions and questions that lead to new ways of thinking, or see previously overlooked issues. Raymond (2000) summarises this effect as 'many eyeballs tame complexity'.

FOSS is frequently criticised as having a free rider problem: why submit patches if doing so only benefits others? Firstly, as noted, academic research requires peer review: obfuscating methods only hinders this process. Moreover, beyond selecting appropriate approaches to research, it is rarely methods that make research valuable. Rather, it is how researchers analyse and interpret collected data so as to advance the existing knowledge in their field. Additionally, according to game theory, whilst intuitively it seems altruistic to submit code to FOSS projects, it is, in fact, optimistically selfish. The cost has already been incurred in creating patches. By not submitting patches, the cost of maintaining patches for subsequent updates falls on the patch holder. Merging patches with source places that cost back onto the community of developers that maintain the project. Furthermore, submission of the patch fosters collaborative involvement amongst the community and therefore increases development.

Here I have outlined just a few of the many benefits that FOSS provides to academic researchers. However, despite the significant benefits, this is not to suggest FOSS is some utopian catchall solution. As with all tools, it is important to justify selection against the available alternatives so as to make the best choice for the problem at hand.